<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>LaTeX 从入坑到退坑</title>
      <link href="/2022/03/01/LaTeX%20Introduction/"/>
      <url>/2022/03/01/LaTeX%20Introduction/</url>
      
        <content type="html"><![CDATA[<p>虽然 Markdown 很好用，但是生成的 pdf 文档看起来就是没有范不够正式。此外，使用 LaTeX 也是我们之后写论文的必备技能。</p><p>本教程主要涉及已对 Markdown 较为熟识之后的迁移学习。</p><h2 id="前置知识">前置知识</h2><ul><li>Markdown 入门</li><li>Markdown 编写数学公式的方法</li></ul><h2 id="LaTeX-简介">LaTeX 简介</h2><p>我们首先解决以下几个问题：</p><ul><li>LaTeX 是什么？</li><li>LaTeX 怎样运作？</li><li>我该在哪里写 LaTex？</li></ul><p>在解决上述几个问题之后，我们再详细介绍该怎么写 LaTeX 的问题。</p><h3 id="LaTeX-是什么？">LaTeX 是什么？</h3><p>相信你读到这里已经做好觉悟要被灌输一系列关键词和其对应概念了。让我们开始：</p><blockquote><p>历史回溯到 Knuth 教授的巨著 The Art of Computer Programming 将要出版之际，当出版商将他们排版的书稿草样交给 Knuth 教授的时候，他对于其中复杂数学公式的排版处理十分不满。其排版之粗糙，已达到了会影响人们理解原书内容的程度。因此，对于复杂的数学和物理公式，我们急需一种能够将其在互联网上传输的编码格式，使得人能阅读的公式和机器能存储的公式之间达到一种互相转化。</p></blockquote><ul><li><strong>TeX</strong>：一种排版引擎，也是该引擎使用的标记语言的名称。引擎是指能够断行、分页的程序，标记语言是控制命令和文本结合的格式。可以类比理解成你写的 C++ 源代码或者更底层的机器指令码，如输入 <code>$2^6$</code>。</li><li><strong>LaTeX</strong>：是一个基于 TeX 的排版系统，将用户按照它的格式编写的文档解释成 TeX 引擎能理解的形式并交付给 TeX 引擎处理，再将最终结果返回给用户。可以类比理解成 g++ 编译器，将上述代码渲染为 2626。</li><li><strong>pdfTeX</strong> 与 <strong>pdfLaTeX</strong>：原版 TeX 系统生成的文件是 <code>dvi</code> 格式，而 pdfTeX 系统下生成的文件是 <code>pdf</code> 格式。</li><li><strong>XeTeX</strong> 与 <strong>XeLaTeX</strong>：上述 TeX 系统生成的字符集只支持 ASCII 字符。在 XeTeX 出现之前，我们曾使用过引用引入 CJK 宏库（解决不支持中日韩字符问题的一个库）手段来处理中文字符的问题。但是这个排版系统对所有 Unicode 字符都实现了支持。</li><li><strong>LuaTeX</strong> 与 <strong>LuaLaTeX</strong>：<code>pdfTeX</code> 系统的继承者，支持使用一些用户自定义脚本来实现之前需要写成 TeX 的功能。支持 Unicode，内联 lua，支持 OpenType。</li></ul><p>这里我们推荐使用 <code>XeTeX</code> 系统来进行我们日常的工作，我们后续的教程也围绕这个排版系统展开。为了简洁起见，我们后续不再区分上述概念，统一使用 <code>TeX</code>，<code>LaTeX</code> 来表述我们在说的这个话题。</p><h3 id="LaTeX-怎样运作？">LaTeX 怎样运作？</h3><p>LaTeX 排版系统的输入是含有我们敲的文本和控制命令的 <code>tex</code> 文件，输出是一份 <code>pdf</code> 文件。我们只需要负责在 <code>tex</code> 文件中写下源码，然后剩下的编译和生成工作全部交给 LaTeX 即可。</p><p>有时我们还可以把一个 LaTeX 项目组织成一个文件夹，此时还是一份 <code>tex</code> 文件决定一个 <code>pdf</code> 的生成，但是我们还可以在这个文件夹中引入其他一些文件，如字体文件，图片文件，<code>.cls</code> 文件（文档模板类文件）等等。此外，我们还可以在这个文件夹中编写多个 <code>tex</code> 文件，以共享文件夹中的其他资源。此时不同的 <code>tex</code> 文件之间甚至可以项目包含（类比于 C++ 的 <code>#include</code> 包含）。</p><h3 id="在哪里编写-LaTeX？">在哪里编写 LaTeX？</h3><p>我们有离线和在线两种模式来撰写 LaTeX。</p><p>离线模式就是安装一个 LaTeX 排版系统，类比我们想写 Markdown 的时候装了一个 Typora 软件一样，我们可以安装相应的软件来辅助我们工作，如：</p><ul><li>TeXworks</li><li>TeXstudio</li></ul><p>而使用这种方式安装带来的问题是可能安装包过于臃肿，优点是不用受到网络环境等等因素的干扰，也不用受到网络环境存储容量或运行时环境的限制。其安装方式在网络上搜索“LaTeX 入门”便可找到堆积如山的<a href="https://www.zhihu.com/question/62943097">教程</a>。</p><p>而我们这里推崇的方式就是使用在线方式来编写。如 <code>Overleaf</code> 在内的托管网站会将你的每个 TeX 项目组织成一个仓库的形式，并允许你在其中进行在线编辑：</p><p><img src="https://s2.loli.net/2022/02/14/JcqCKNfs31vxm2u.png" alt="image-20220213203750216"></p><p><img src="https://s2.loli.net/2022/02/13/IKAPDlYTmFEu5S1.png" alt="image-20220213204115880"></p><p>左上角是我们当前仓库的文件清单，较左侧窗口是编辑器，右侧窗口是即时预览窗口。类似于 <code>Overleaf</code> 的网站甚至还提供了仓库权限管理系统，你可以邀请其他人一起编辑，或是导入别人编辑好的模板继续你的编辑等等。值得一提的是许多学术会议都会给出他们接受的论文的模板。</p><p>鉴于 <code>Overleaf</code> 需要科学上网才能访问：</p><ul><li>某清 TUNA 协会维护了一份 <a href="https://overleaf.tsinghua.edu.cn/login">Tsinghua Overleaf</a>，需要使用清华统一认证登录;</li><li>清华大学某系某协会网络部维护了一份自己的基于 <code>Overleaf</code> 的 LaTeX 在线编辑网站 <a href="https://stu.cs.tsinghua.edu.cn/tex9/">TeX9</a>，需要使用酒井 ID 才能进行登录。</li></ul><p>我们接下来的演示便是基于 TeX9。</p><h2 id="LaTeX-编写基础">LaTeX 编写基础</h2><p>说是编写基础，接下来我们就要像介绍 Markdown 一样，先简单罗列一些简单的文档控制命令。在基础篇中我们先仅仅介绍怎样实现从 Markdown 到 LaTeX 的迁移。对于其中一些文档控制命令，我们将会在后续教程详细说明。</p><p>这里提供 CheatSheet 供查阅：</p><p><img src="https://s2.loli.net/2022/02/14/KP5yeuotcJhTlVO.png" alt="image-20220214004156979"></p><p><img src="https://s2.loli.net/2022/02/14/j3EHglvqhoetRi4.png" alt="image-20220214004207594"></p><h3 id="Hello-World">Hello, World!</h3><p><img src="https://s2.loli.net/2022/02/13/HPCaZJUtNOj74uF.png" alt="image-20220213205714169"></p><p>上述便是一份 <code>tex</code> 文件的示例，我们推荐你新建一个项目，然后将下面我们要介绍的内容一一尝试。</p><h3 id="支持中文字符">支持中文字符</h3><p>首先，我们上述已经介绍过，支持中文字符的方式有二，一种是引入 <code>CJK</code> 宏包，另一种是使用 XeLaTeX 编译器并对源码做适当修改。这里我们采用第二种方式。</p><p>首先，按下你项目左上角的 Menu 按钮，然后在 Compiler 选项中选择 XeLaTeX 选项。</p><p>然后，输入以下内容：</p><table><thead><tr><th><code>1 2 3 4</code></th><th><code>\documentclass[UTF8]&#123;ctexart&#125; \begin&#123;document&#125; 你好，world! \end&#123;document&#125; </code></th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><p>这样我们就完成了中文字符的引入。至于 <code>documentclass</code> 是什么，我们将在后续介绍。</p><h3 id="导言与文档信息">导言与文档信息</h3><table><thead><tr><th><code> 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18</code></th><th><code>\documentclass[UTF8]&#123;ctexart&#125; \title&#123;Sample Document&#125; \author&#123;c7w&#125; \date&#123;\today&#125; \begin&#123;document&#125; % 这条控制命令会读取导言部分的文档相关信息 % 并将其渲染到文档中 % 事实上可以参考相关宏包的 Doc： % http://texdoc.net/texmf-dist/doc/latex/titling/titling.pdf \maketitle  你好，world! [在这里你就开始写你的作业第一题了] \end&#123;document&#125; </code></th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><p><img src="https://s2.loli.net/2022/02/13/IbNdaCD2wFXVlAq.png" alt="image-20220213210910831"></p><h3 id="章节与段落">章节与段落</h3><table><thead><tr><th><code> 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40</code></th><th><code>\documentclass[UTF8]&#123;ctexart&#125; \title&#123;Sample Document&#125; \author&#123;c7w&#125; \date&#123;\today&#125; \begin&#123;document&#125; \maketitle \section&#123;我是 Section 标题&#125; 我是 Section 介绍。 \subsection&#123;我是 Subsection 标题&#125; 我是 Subsection 介绍。 \subsubsection&#123;我是 Subsubsection 标题&#125; 我是 Subsubsection 介绍。 % \subsubsubsection&#123;不能继续套 sub 了，到底了&#125; \paragraph&#123;我是 Paragraph 标题&#125; 我是 Paragraph 后面跟着写的东西。 本人也是经过了深思熟虑，在每个日日夜夜思考这个问题。 我们都知道，只要有意义，那么就必须慎重考虑。 这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 要想清楚，一天掉多少根头发，到底是一种怎么样的存在。 贝多芬曾经说过，卓越的人一大优点是：在不利与艰难的遭遇里百折不饶。  \subparagraph&#123;我是 Subparagraph 标题&#125; 我是 Subparagraph 后面跟着写的东西。 这不禁令我深思既然如何，一天掉多少根头发的发生，到底需要如何做到，不一天掉多少根头发的发生，又会如何产生。  总结的来说， 所谓一天掉多少根头发，关键是一天掉多少根头发需要如何写。 生活中，若一天掉多少根头发出现了，我们就不得不考虑它出现了的事实。 郭沫若曾经说过，形成天才的决定因素应该是勤奋。这不禁令我深思这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 我们一般认为，抓住了问题的关键，其他一切则会迎刃而解。 \subsection&#123;这是第二节&#125; \paragraph&#123;第二节&#125; 的首段。 \subparagraph&#123;第二节&#125;的第二段。 \end&#123;document&#125; </code></th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><p><img src="https://s2.loli.net/2022/02/13/kIeOlBjF7uzJ5ZH.png" alt="image-20220213211528785"></p><p>在文档类 <code>article</code>/<code>ctexart</code> 中（文档类的概念我们会在进阶篇中提供指导），我们使用这些控制序列来调整行文组织结构。他们分别是：</p><ul><li><code>\section&#123;·&#125;</code></li><li><code>\subsection&#123;·&#125;</code></li><li><code>\subsubsection&#123;·&#125;</code></li><li><code>\paragraph&#123;·&#125;</code></li><li><code>\subparagraph&#123;·&#125;</code></li></ul><h3 id="文档目录">文档目录</h3><p>我们尝试在渲染区 <code>\maketitle</code> 后加入如下控制命令：</p><table><thead><tr><th><code>1</code></th><th><code>\tableofcontents </code></th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><p>没错，正如你所想的，这就会生成文档的 TOC：</p><p><img src="https://s2.loli.net/2022/02/13/sSI8byUWJjYLkPw.png" alt="image-20220213211830033"></p><h3 id="数学公式">数学公式</h3><h4 id="行内公式与行间公式">行内公式与行间公式</h4><p>首先引入相应包 <strong>amsmath</strong>，然后我们简单介绍公式的引入：</p><table><thead><tr><th><code> 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36</code></th><th><code>\documentclass[UTF8]&#123;ctexart&#125; \usepackage&#123;amsmath&#125; % 注意这里引入相应包 \title&#123;Sample Document&#125; \author&#123;c7w&#125; \date&#123;\today&#125; \begin&#123;document&#125; \maketitle \tableofcontents \section&#123;我是 Section 标题&#125; 我是 Section 介绍。 \subsection&#123;这个 Section 我们介绍数学公式的写法&#125; \subsubsection&#123;行内公式&#125; % 行内公式基本可以照搬 Markdown 的模式。 初始处理 1 - 5 位的初始字符串集合需要处理 $18 + 18^2 + 18^3 + 18^4 + 18^5 = 2*10^6$ 的数据，因此需要 $O(T)$ 的时间，这里 $T=2*10^6$。 \subsubsection&#123;行间公式&#125; % 行间公式用 $$ $$ 或者 \[ \] 来框住都可以，但在 LaTeX 中前者会改变行文的默认行间距，因此不推荐采用。 \[ \text&#123;dp&#125;[i] = \text&#123;dp&#125;[next[i]]+1, next[i] &gt; 0. \]  \end&#123;document&#125; </code></th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><p><img src="https://s2.loli.net/2022/02/13/CI2hzmUEwluDp6s.png" alt="image-20220213213336585"></p><h4 id="上下标、根式与分式">上下标、根式与分式</h4><ul><li>上下标请使用 <code>^</code> 与 <code>_</code></li><li>根式与分式请使用 <code>\sqrt&#123;·&#125;</code> 与 <code>\frac&#123;·&#125;&#123;·&#125;</code></li><li>在行间公式和行内公式中，分式的输出效果是有差异的。如果要强制行内模式的分式显示为行间模式的大小，可以使用 <code>\dfrac</code>, 反之可以使用 <code>\tfrac</code></li></ul><h4 id="运算符">运算符</h4><p>一些小的运算符，可以在数学模式下直接输入；另一些需要用控制序列生成，如</p><table><thead><tr><th><code>1 2</code></th><th><code>\[ \pm\; \times \; \div\; \cdot\; \cap\; \cup\; \geq\; \leq\; \neq\; \approx \; \equiv \] </code></th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><p>连加、连乘、极限、积分等大型运算符分别用 <code>\sum</code>, <code>\prod</code>, <code>\lim</code>, <code>\int</code> 生成。他们的上下标在行内公式中被压缩，以适应行高。我们可以用 <code>\limits</code> 和 <code>\nolimits</code> 来强制显式地指定是否压缩这些上下标。例如：</p><table><thead><tr><th><code>1 2 3 4</code></th><th><code>$ \sum_&#123;i=1&#125;^n i\quad \prod_&#123;i=1&#125;^n $ $ \sum\limits _&#123;i=1&#125;^n i\quad \prod\limits _&#123;i=1&#125;^n $ \[ \lim_&#123;x\to0&#125;x^2 \quad \int_a^b x^2 dx \] \[ \lim\nolimits _&#123;x\to0&#125;x^2\quad \int\nolimits_a^b x^2 dx \] </code></th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><p>多重积分可以使用 <code>\iint</code>, <code>\iiint</code>, <code>\iiiint</code>, <code>\idotsint</code> 等命令输入。</p><table><thead><tr><th><code>1</code></th><th><code>\[ \iint\quad \iiint\quad \iiiint\quad \idotsint \] </code></th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><p><img src="https://s2.loli.net/2022/02/13/VeI1zToC3JfAyK9.png" alt="image-20220213214301901"></p><h4 id="定界符">定界符</h4><p>各种括号用 <code>()</code>, <code>[]</code>, <code>\&#123;\&#125;</code>, <code>\langle\rangle</code> 等命令表示；注意花括号通常用来输入命令和环境的参数，所以在数学公式中它们前面要加 <code>\</code>。</p><p>因为 LaTeX 中 <code>|</code> 和 <code>\|</code> 的应用过于随意，amsmath 宏包推荐用 <code>\lvert\rvert</code> 和 <code>\lVert\rVert</code> 取而代之。</p><p>为了调整这些定界符的大小，amsmath 宏包推荐使用 <code>\big</code>, <code>\Big</code>, <code>\bigg</code>, <code>\Bigg</code> 等一系列命令放在上述括号前面调整大小。</p><h4 id="省略号">省略号</h4><p>省略号用 <code>\dots</code>, <code>\cdots</code>, <code>\vdots</code>, <code>\ddots</code> 等命令表示。<code>\dots</code> 和 <code>\cdots</code> 的纵向位置不同，前者一般用于有下标的序列。</p><h4 id="矩阵">矩阵</h4><p><code>amsmath</code> 的 <code>pmatrix</code>, <code>bmatrix</code>, <code>Bmatrix</code>, <code>vmatrix</code>, <code>Vmatrix</code> 等环境可以在矩阵两边加上各种分隔符。</p><table><thead><tr><th><code>1 2 3 4 5</code></th><th><code>\[ \begin&#123;pmatrix&#125; a&amp;b\\c&amp;d \end&#123;pmatrix&#125; \quad \begin&#123;bmatrix&#125; a&amp;b\\c&amp;d \end&#123;bmatrix&#125; \quad \begin&#123;Bmatrix&#125; a&amp;b\\c&amp;d \end&#123;Bmatrix&#125; \quad \begin&#123;vmatrix&#125; a&amp;b\\c&amp;d \end&#123;vmatrix&#125; \quad \begin&#123;Vmatrix&#125; a&amp;b\\c&amp;d \end&#123;Vmatrix&#125; \] </code></th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><p><img src="https://s2.loli.net/2022/02/14/uix67cYI4UaXvK9.jpg" alt="img"></p><h4 id="多行公式">多行公式</h4><p>可以用 <code>aligned</code> 环境来实现，用 <code>&amp;</code> 实现位置对齐。</p><table><thead><tr><th><code> 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17</code></th><th><code>\[ \begin&#123;aligned&#125; x = a+b+c+ \\ +d+e+f+g+d+d+d+d+d+d+d+d+d+d+d+d \\ +h+i \\ +1 \\ \end&#123;aligned&#125; \] \[ \begin&#123;aligned&#125; x &amp;= a+b+c+ \\ &amp; +d+e+f+g+d+d+d+d+d+d+d+d+d+d+d+d \\ &amp; +h+i \\ &amp; +1 \\ \end&#123;aligned&#125; \] </code></th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><p>效果：</p><p><img src="https://s2.loli.net/2022/02/14/oZugGY2MF78Lk9t.png" alt="image-20220214001008550"></p><p>若想要公式自带编号，可以用 <code>gather</code> 和 <code>align</code> 环境，其中 <code>gather</code> 环境将公式分行渲染，<code>align</code> 同上述 <code>aligned</code>，可以控制对齐：</p><table><thead><tr><th><code> 1 2 3 4 5 6 7 8 9 10 11</code></th><th><code>\begin&#123;gather&#125; a = b+c+d \\ x = y+z \\  p = a_1 + a_2 + a_3 + \dots + a_&#123;200&#125; \end&#123;gather&#125; \begin&#123;align&#125; a &amp;= b+c+d \\ x &amp;= y+z \\ p &amp;= a_1 + a_2 + a_3 + \dots + a_&#123;200&#125; \end&#123;align&#125; </code></th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><p><img src="https://s2.loli.net/2022/02/14/5tZcTngyKSIsWxV.png" alt="image-20220214001355079"></p><p>若想使用分段函数，可以使用 <code>cases</code> 环境：</p><table><thead><tr><th><code>1 2 3 4 5 6 7</code></th><th><code>\[ y=  \begin&#123;cases&#125; -x,\quad x\leq 0 \\ x,\quad x&gt;0 \end&#123;cases&#125;  \] </code></th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><h4 id="小结">小结</h4><p>数学公式是在引入了 <strong>amsmath</strong> 包之后，利用其提供的各种各样次环境来实现了较为复杂的公式的编辑。整体来说，与 Mathjax 的风格相差不大，因此迁移学习起来也十分方便。</p><p>这里我们再提供辅助工具：</p><ul><li><a href="https://mathpix.com/">https://mathpix.com/</a> 能够 OCR 手写体或是印刷体公式，而后将图片中的公式转换成 LaTeX 数学公式的代码。</li></ul><h3 id="表格">表格</h3><p><code>tabular</code> 环境提供了最简单的表格功能。它用 <code>\hline</code> 命令表示横线，在列格式中用 <code>|</code> 表示竖线；用 <code>&amp;</code> 来分列，用 <code>\\</code> 来换行；每列可以采用居左、居中、居右等横向对齐方式，分别用 <code>l</code>、<code>c</code>、<code>r</code> 来表示。</p><p>| <code> 1 2 3 4 5 6 7 8 9 10 11 12 13</code> | <code>\begin&#123;tabular&#125;&#123;|l|c|r|&#125; \hline 操作系统&amp; 发行版&amp; 编辑器\\ \hline Windows &amp; MikTeX &amp; TexMakerX \\ \hline Unix/Linux &amp; teTeX &amp; Kile \\ \hline Mac OS &amp; MacTeX &amp; TeXShop \\ \hline 通用&amp; TeX Live &amp; TeXworks \\ \hline \end&#123;tabular&#125; </code> |<br>| -------------------------------- | ------------------------------------------------------------ |<br>|                                  |                                                              |</p><p><img src="https://s2.loli.net/2022/02/14/ytG5hReFbjWClwg.jpg" alt="img"></p><h3 id="图片">图片</h3><p>在 LaTeX 中插入图片，有很多种方式。最好用的应当属利用 <code>graphicx</code> 宏包提供的 <code>\includegraphics</code> 命令。比如你在你的 TeX 源文件同目录下，有名为 <code>a.jpg</code> 的图片，你可以用这样的方式将它插入到输出文档中：</p><table><thead><tr><th><code>1 2 3 4 5</code></th><th><code>\documentclass&#123;article&#125; \usepackage&#123;graphicx&#125; \begin&#123;document&#125; \includegraphics&#123;a.jpg&#125; \end&#123;document&#125; </code></th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><p>想要了解更多，参见 <code>graphicx</code> 的文档：<a href="http://texdoc.net/texmf-dist/doc/latex/graphics/graphicx.pdf%E3%80%82">http://texdoc.net/texmf-dist/doc/latex/graphics/graphicx.pdf。</a></p><blockquote><p><strong>浮动体环境</strong></p><p>什么是浮动体环境：<code>table</code> 与 <code>figure</code>，两种浮动体环境可以替代上述的表格和图片环境，实现为表格或图片自动安排位置。</p><p>想了解更多有关浮动体环境的内容，详见<a href="https://liam.page/series/#LaTeX-%E4%B8%AD%E7%9A%84%E6%B5%AE%E5%8A%A8%E4%BD%93">这里</a>。</p></blockquote><h3 id="页面设置">页面设置</h3><h4 id="页边距">页边距</h4><p>设置页边距，推荐使用 <code>geometry</code> 宏包。可以在<a href="http://texdoc.net/texmf-dist/doc/latex/geometry/geometry.pdf">这里</a>查看它的说明文档。</p><p>比如我希望，将纸张的长度设置为 20cm、宽度设置为 15cm、左边距 1cm、右边距 2cm、上边距 3cm、下边距 4cm，可以在导言区加上这样几行：</p><table><thead><tr><th><code>1 2 3</code></th><th><code>\usepackage&#123;geometry&#125; \geometry&#123;papersize=&#123;20cm,15cm&#125;&#125; \geometry&#123;left=1cm,right=2cm,top=3cm,bottom=4cm&#125; </code></th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><h4 id="页眉页脚">页眉页脚</h4><p>设置页眉页脚，推荐使用 <code>fancyhdr</code> 宏包。可以在<a href="http://texdoc.net/texmf-dist/doc/latex/fancyhdr/fancyhdr.pdf">这里</a>查看它的说明文档。</p><p>比如我希望，设置自定义页眉；页脚的正中写上页码；页眉和正文之间有一道宽为 0.4pt 的横线分割，可以在导言区加上如下几行：</p><table><thead><tr><th><code> 1 2 3 4 5 6 7 8 9 10 11</code></th><th><code>\usepackage&#123;fancyhdr&#125; \pagestyle&#123;fancy&#125; \lhead&#123;页眉左侧&#125; \chead&#123;页眉中间&#125; \rhead&#123;页眉右侧&#125; \lfoot&#123;&#125; \cfoot&#123;\thepage&#125; \rfoot&#123;&#125; \renewcommand&#123;\headrulewidth&#125;&#123;0.4pt&#125; \renewcommand&#123;\headwidth&#125;&#123;\textwidth&#125; \renewcommand&#123;\footrulewidth&#125;&#123;0pt&#125; </code></th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><h4 id="段间距">段间距</h4><p>我们可以通过修改长度 <code>\parskip</code> 的值来调整段间距。例如在导言区添加以下内容</p><table><thead><tr><th><code>1</code></th><th><code>\addtolength&#123;\parskip&#125;&#123;.4em&#125; </code></th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><p>则可以在原有的基础上，增加段间距 0.4em。如果需要减小段间距，只需将该数值改为负值即可。</p><h3 id="引用与尾注脚注">引用与尾注脚注</h3><h4 id="交叉引用">交叉引用</h4><p>交叉引用设置方法：</p><ul><li>给对象命名：<code>\label&#123;name&#125;</code></li><li>引用对象：<code>\ref&#123;name&#125;</code></li></ul><p>注意，在引用对象时，<code>\ref&#123;name&#125;</code> 会被替换会被引用对象的编号。举个例子，如果被引用对象在文档中是第 5 个被命名的，那么这里就会被替换为 5.</p><p>要想避免图/表/论文等等引用在计数上互相影响，你可以在命名时命名为 <code>tag:name</code> 的格式，引用时使用 <code>tag:name</code> 的格式来引用。具体来说，这些 tag 有：</p><table><thead><tr><th style="text-align:left">Tag</th><th style="text-align:left">Description</th></tr></thead><tbody><tr><td style="text-align:left"><strong><code>ch:</code></strong></td><td style="text-align:left">chapter</td></tr><tr><td style="text-align:left"><strong><code>sec:</code></strong></td><td style="text-align:left">section</td></tr><tr><td style="text-align:left"><strong><code>subsec:</code></strong></td><td style="text-align:left">subsection</td></tr><tr><td style="text-align:left"><strong><code>fig:</code></strong></td><td style="text-align:left">figure</td></tr><tr><td style="text-align:left"><strong><code>tab:</code></strong></td><td style="text-align:left">table</td></tr><tr><td style="text-align:left"><strong><code>eq:</code></strong></td><td style="text-align:left">equation</td></tr><tr><td style="text-align:left"><strong><code>lst:</code></strong></td><td style="text-align:left">code listing</td></tr><tr><td style="text-align:left"><strong><code>itm:</code></strong></td><td style="text-align:left">enumerated list item</td></tr><tr><td style="text-align:left"><strong><code>alg:</code></strong></td><td style="text-align:left">algorithm</td></tr><tr><td style="text-align:left"><strong><code>app:</code></strong></td><td style="text-align:left">appendix subsection</td></tr></tbody></table><h4 id="尾注脚注">尾注脚注</h4><p>尾注直接在最后写就行，记得设置引用。</p><p>脚注可以使用 <code>\footnote&#123;角注内容&#125;</code> 来声明。</p><blockquote><p>想了解该如何更好地引入参考文献，请学习 BibTeX 宏包。</p><ul><li><a href="https://zh.wikipedia.org/wiki/BibTeX">https://zh.wikipedia.org/wiki/BibTeX</a></li></ul></blockquote><h3 id="列表与枚举">列表与枚举</h3><table><thead><tr><th><code> 1 2 3 4 5 6 7 8 9 10 11 12 13</code></th><th><code>\begin&#123;enumerate&#125;    \item \LaTeX&#123;&#125; 好 处 都 有 啥        \begin&#123;description&#125;            \item[好 用] 体 验 好 才 是 真 的 好            \item[好 看] 强 迫 症 的 福 音            \item[开 源] 众 人 拾 柴 火 焰 高        \end&#123;description&#125;    \item 还 有 呢?        \begin&#123;itemize&#125;            \item 好 处 1            \item 好 处 2    \end&#123;itemize&#125; \end&#123;enumerate&#125; </code></th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><p><img src="https://s2.loli.net/2022/02/14/U3E8uCBy4RKxfSL.png" alt="image-20220214004408507"></p><h2 id="LaTeX-后续学习">LaTeX 后续学习</h2><h3 id="更多宏包">更多宏包</h3><p>宏包一般都会提供相应的文档供我们阅读使用。</p><p>这里提供查询宏包对应文档的网站：</p><ul><li><a href="https://texdoc.org/index.html">https://texdoc.org/index.html</a></li></ul><p><img src="https://s2.loli.net/2022/02/14/jkVbA8vBeY9FsUR.png" alt="image-20220214003834121"></p><h3 id="制作自己的模板">制作自己的模板</h3><p>详见参考资料中 <code>.cls</code> 文件详解部分。我们同时推荐读者可以去多读一读其他已存在的 Template 的 <code>.cls</code> 内容。</p><h3 id="制作幻灯片">制作幻灯片</h3><p>使用 Beamer 宏包可以制作幻灯片。详见：</p><ul><li><a href="https://www.overleaf.com/learn/latex/Beamer">https://www.overleaf.com/learn/latex/Beamer</a></li></ul><p>同时，校内也提供了一些适用于各种 pre 的 Beamer 模板。</p><h2 id="参考链接">参考链接</h2><ul><li>（推荐）一份其实很短的 LaTeX 入门文档：<a href="https://liam.page/2014/09/08/latex-introduction/">https://liam.page/2014/09/08/latex-introduction/</a></li><li>（推荐）如何使用 LaTeX 排版论文：<a href="https://github.com/tuna/thulib-latex-talk">https://github.com/tuna/thulib-latex-talk</a></li><li>（<code>.cls</code> 文件详解）How to write a LaTeX class file and design your own CV： <a href="https://www.overleaf.com/learn/latex/How_to_write_a_LaTeX_class_file_and_design_your_own_CV_(Part_1)">https://www.overleaf.com/learn/latex/How_to_write_a_LaTeX_class_file_and_design_your_own_CV_(Part_1)</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 技术/综合 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LaTeX </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>（2-9,4-9）图像处理与学术研究 课程笔记</title>
      <link href="/2022/02/24/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E4%B8%8E%E5%AD%A6%E6%9C%AF%E7%A0%94%E7%A9%B6/"/>
      <url>/2022/02/24/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E4%B8%8E%E5%AD%A6%E6%9C%AF%E7%A0%94%E7%A9%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="图像处理与学术研究">图像处理与学术研究</h2><h3 id="Chapter-1-图像处理基础"><strong>Chapter 1</strong> 图像处理基础</h3><h4 id="1-1-概念">1.1 概念</h4><ul><li><p><strong>图像</strong>是视觉信息的重要表现方式，是对客观事物相似的、生动的描述，是光能量和人类大脑相结合的产物。</p></li><li><p><strong>数字图像处理(Digital Image Processing)<strong>是利用计算机对图像进行</strong>去除噪声、增强、复原</strong><br><strong>分割、提取特征等的理论、方法和技术</strong>，是信号处理的子类，相关理论涉及通信、计算机、电子、数学、物理等多个方面，已成为一门发展迅速的综合性学科。</p></li></ul><h4 id="1-2-图像函数">1.2 图像函数</h4><ul><li><p><code>A = imread('filename');</code></p><p>从 <code>filename</code> 指定的文件读取图像，并从文件内容推断出其格式。如果 <code>filename</code> 为多图像文件，则 <code>imread</code> 读取该文件中的第一个图像。下图为图像的返回结果。</p><p><img src="https://pic.iqy.ink/2022/02/24/66d16989c2dd1.png" alt="image-20220224210535640.png"></p></li><li><p><code>imshow('filename');</code></p><p>在图窗中显示灰度图像 <code>I</code>。<code>imshow</code> 使用图像数据类型的默认显示范围，并优化图窗、坐标区和图像对象属性以便显示图像。</p></li><li><p><code>imwrite(A,filename);</code></p><p>将图像数据 <code>A</code> 写入 <code>filename</code> 指定的文件，并从扩展名推断出文件格式。<code>imwrite</code> 在当前文件夹中创建新文件。输出图像的位深取决于 <code>A</code> 的数据类型和文件格式。对于大多数格式来说：</p><ul><li>如果 <code>A</code> 属于数据类型 <code>uint8</code>，则 <code>imwrite</code> 输出 8 位值。</li><li>如果 <code>A</code> 属于数据类型 <code>uint16</code> 且输出文件格式支持 16 位数据（JPEG、PNG 和 TIFF），则 <code>imwrite</code> 将输出 16 位的值。如果输出文件格式不支持 16 位数据，则 <code>imwrite</code> 返回错误。</li><li>如果 <code>A</code> 是灰度图像或者属于数据类型 <code>double</code> 或 <code>single</code> 的 RGB 彩色图像，则 <code>imwrite</code> 假设动态范围是 [0,1]，并在将其作为 8 位值写入文件之前自动按 255 缩放数据。如果 <code>A</code> 中的数据是 <code>single</code>，则在将其写入 GIF 或 TIFF 文件之前将 <code>A</code> 转换为 <code>double</code>。</li><li>如果 <code>A</code> 属于 <code>logical</code> 数据类型，则 <code>imwrite</code> 会假定数据为二值图像并将数据写入位深为 1 的文件（如果格式允许）。BMP、PNG 或 TIFF 格式以输入数组形式接受二值图像。</li></ul><p>如果 <code>A</code> 包含索引图像数据，则应另外指定 <code>map</code> 输入参数。</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">%example</span></span><br><span class="line">I_rgb = imread(<span class="string">&quot;1.jpg&quot;</span>);</span><br><span class="line">imwrite(I_rgb,<span class="string">&#x27;2.jpg&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://pic.iqy.ink/2022/02/24/c67550e021405.png" alt="image-20220224211505785.png"></p></li><li><p><code>I = rgb2gray('filename');</code></p><p><code>rgb2gray</code> 函数通过消除色调和饱和度信息，同时保留亮度，来将 RGB 图像转换为灰度图。</p></li><li><p><code>th = graythresh(I);</code></p><p>使用 Otsu 方法 [1] 根据灰度图像 <code>I</code> 计算全局阈值 <code>T</code>。</p><blockquote><p>[1] Otsu, N., “A Threshold Selection Method from Gray-Level Histograms.” IEEE Transactions on Systems, Man, and Cybernetics. Vol. 9, No. 1, 1979, pp. 62–66.</p><p>Otsu 方法选择一个阈值，使阈值化的黑白像素的类内方差最小化。全局阈值 <code>T</code> 可与 <code>imbinarize</code>结合使用以将灰度图像转换为二值图像。</p></blockquote><p><img src="https://pic.iqy.ink/2022/02/24/a2b997fe44660.png" alt="image-20220224214246247.png"></p><ul><li><p><code>BW = im2bw(I,level);</code></p><p>基于阈值将图像转换为二值图像 <code>BW(Black and White)</code> 。方法是将输入图像中亮度大于 <code>level</code> 的所有像素替换为值 <code>1</code>（白色），将所有其他像素替换为值 <code>0</code>（黑色）。</p></li></ul></li><li><p><code>subplot(m,n,p)</code></p><p>将当前图窗划分为 <code>m</code>×<code>n</code> 网格，并在 <code>p</code> 指定的位置放置图像。MATLAB 按行号对子图位置进行编号。第一个子图是第一行的第一列，第二个子图是第一行的第二列，依此类推。</p></li></ul><h4 id="1-3-图像分类">1.3 图像分类</h4><ul><li><p><strong>灰色图像</strong></p><p>灰色图像使用<code>灰度级</code>来表示像素点的明暗程度，数值是介于 0 到 255 之间的整数。</p></li><li><p><strong>黑白图像</strong></p><p>黑色图像的二维矩阵中每一个点，呈现黑色<code>0</code>或白色<code>1</code>。</p></li><li><p><strong>彩色图像</strong></p></li></ul><p><img src="https://img-blog.csdnimg.cn/20190711231129454.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25hbmh1YWliZWlhbg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>彩色图像又叫 RGB 图像，由三个<code>m</code>×<code>n</code>的二维矩阵构成，矩阵中每一个点的值是介于0 到 255 之间的整数，从前到后依次是红分量、绿分量和蓝分量。</p><ul><li><p><strong>彩色图像转换到灰度图像</strong></p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">I_rgb = imread(<span class="string">&#x27;filename_1&#x27;</span>);</span><br><span class="line">I_r = I_rgb(:,:,<span class="number">1</span>);<span class="comment">% R</span></span><br><span class="line">I_g = I_rgb(:,:,<span class="number">2</span>); <span class="comment">% G</span></span><br><span class="line">I_b = I_rgb(:,:,<span class="number">3</span>);<span class="comment">% B</span></span><br><span class="line">I_GRAY = <span class="number">0.299</span>*I_r + <span class="number">0.587</span>*I_g + <span class="number">0.114</span>*I_b;</span><br><span class="line">imshow(I_GRAY);</span><br><span class="line">imwrite(I_GRAY,<span class="string">&#x27;filename_2&#x27;</span>);</span><br></pre></td></tr></table></figure><p><code>I_GRAY = 0.2989*I_r + 0.5870*I_g + 0.1140*I_b;</code>三个系数和为一，心理学家发现取这三个系数更加符合人的感官。</p><p>故灰度图像到彩色图像、黑白图像到灰度图像的过程是不可逆的，过程丢失了关键的数据。</p></li></ul><h4 id="1-4-图像大小">1.4 图像大小</h4><ul><li><p>数据单位</p><ul><li>1<strong>byte</strong> （字节） = 8<strong>bit</strong>（比特/位）</li><li>对于黑白图像存储每一个像素点需要1 bit，对于灰度图像这个大小是1 byte = 8 bit，而对于彩色图像这个值是3 byte。</li></ul></li><li><p>分辨率</p><ul><li>图像总像素的多少，如 640 × 480 = 307200，代表30万像素分辨率。</li><li>拍摄分辨率：<code>4K</code>:4096 × 2160 像素，<code>1080p</code>:1920 × 1080 像素</li></ul></li><li><p>图像压缩：JPG是压缩后的图像数据，BMP是未压缩的。</p></li></ul><h4 id="1-5-图像格式">1.5 图像格式</h4><ul><li><p><strong>BMP</strong></p><p><strong>BMP</strong>取自位图Bitmap的缩写，也称为<strong>DIB</strong>（与<a href="https://zh.wikipedia.org/wiki/%E8%AE%BE%E5%A4%87">设备</a>无关的<strong>位图</strong>），是一种独立于<a href="https://zh.wikipedia.org/wiki/%E6%98%BE%E7%A4%BA%E5%99%A8">显示器</a>的<a href="https://zh.wikipedia.org/wiki/%E4%BD%8D%E5%9B%BE">位图</a><a href="https://zh.wikipedia.org/wiki/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F">数字图像</a>文件格式。BMP文件通常是不<a href="https://zh.wikipedia.org/wiki/%E5%9B%BE%E5%83%8F%E5%8E%8B%E7%BC%A9">压缩</a>的，所以它们通常比同一幅图像的压缩图像文件格式要大很多。例如，一个800×600的24位几乎占据1.4<a href="https://zh.wikipedia.org/wiki/%E7%99%BE%E8%90%AC%E4%BD%8D%E5%85%83%E7%B5%84">MB</a>空间。因此它们通常不适合在<a href="https://zh.wikipedia.org/wiki/%E5%9B%A0%E7%89%B9%E7%BD%91">因特网</a>或者其他低速或者有容量限制的<a href="https://zh.wikipedia.org/wiki/%E5%AA%92%E4%BB%8B">介质</a>上进行传输。</p><p>图像通常保存的<a href="https://zh.wikipedia.org/wiki/%E9%A2%9C%E8%89%B2%E6%B7%B1%E5%BA%A6">颜色深度</a>有2（1bit）、16（4bit）、256（8bit）、65536（16bit）和1670万（24bit）种颜色（其中bit是表示每点所用的数据位）。</p></li><li><p><strong>GIF</strong></p><p><strong>图像互换格式</strong>（英语：Graphics Interchange Format，简称<strong>GIF</strong>）是一种<a href="https://zh.wikipedia.org/wiki/%E4%BD%8D%E5%9B%BE">位图</a><a href="https://zh.wikipedia.org/wiki/%E5%9B%BE%E5%BD%A2%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F">图形文件格式</a>，以8bit色深（即256种颜色）重现<a href="https://zh.wikipedia.org/wiki/%E7%9C%9F%E5%BD%A9%E8%89%B2">真彩色</a>的图像。它实际上是一种<a href="https://zh.wikipedia.org/wiki/%E6%95%B0%E6%8D%AE%E5%8E%8B%E7%BC%A9">压缩</a>文档，采用<a href="https://zh.wikipedia.org/wiki/LZW">LZW</a>压缩算法进行编码，压缩率在50%左右，有效地减少了图像文件在网络上传输的时间。它是目前<a href="https://zh.wikipedia.org/wiki/%E5%85%A8%E7%90%83%E8%B3%87%E8%A8%8A%E7%B6%B2">万维网</a>广泛应用的网络传输图像格式之一。</p></li><li><p><strong>JEPG</strong></p><p><strong>JPEG</strong>或称<strong>JPG</strong>，是一种针对照片影像而广泛使用的<a href="https://zh.wikipedia.org/wiki/%E6%9C%89%E6%8D%9F%E6%95%B0%E6%8D%AE%E5%8E%8B%E7%BC%A9">有损压缩</a>标准方法，以牺牲一部分图像数据达到较高的压缩率，由<strong>联合图像专家小组</strong>（英语：<strong>J</strong>oint <strong>P</strong>hotographic <strong>E</strong>xperts <strong>G</strong>roup）开发。</p><p>由于JPEG优良的品质，被广泛应用于互联网和数码相机领域，网站上80%的图像都采用了.JPEG压缩标准。</p></li><li><p><strong>TIFF</strong></p><p><strong>标签图像文件格式</strong>（<strong>Tagged Image File Format</strong>，简写为<strong>TIFF</strong>）是一种灵活的<a href="https://zh.wikipedia.org/wiki/%E6%A0%85%E6%A0%BC%E5%9B%BE%E5%83%8F">位图</a>格式，主要用来存储包括照片和艺术图在内的图像。</p><p>TIFF最初的设计目的是为了1980年代中期桌面扫描仪厂商达成一个公用的扫描图像文件格式，而不是每个厂商使用自己专有的格式。在刚开始的时候，TIFF只是一个二值图像格式，因为当时的桌面扫描仪只能处理这种格式。随着扫描仪的功能愈来愈强大，并且桌面计算机的磁盘空间越来越大，TIFF逐渐支持灰阶图像和彩色图像。</p></li><li><p><strong>PNG</strong></p><p><strong>便携式网络图形</strong>（英语：<strong>P</strong>ortable <strong>N</strong>etwork <strong>G</strong>raphics，<strong>PNG</strong>）是一种支持从LZ77派生的<a href="https://zh.wikipedia.org/wiki/%E6%97%A0%E6%8D%9F%E5%8E%8B%E7%BC%A9">无损压缩</a>算法的<a href="https://zh.wikipedia.org/wiki/%E4%BD%8D%E5%9B%BE">位图</a>图形格式，支持索引、<a href="https://zh.wikipedia.org/wiki/%E7%81%B0%E5%BA%A6">灰度</a>、<a href="https://zh.wikipedia.org/wiki/RGB">RGB</a>三种颜色方案以及<a href="https://zh.wikipedia.org/wiki/Alpha%E9%80%9A%E9%81%93">Alpha通道</a>等特性。PNG的开发目标是改善并取代<a href="https://zh.wikipedia.org/wiki/GIF">GIF</a>作为适合网络传输的格式而不需专利许可，所以被广泛应用于<a href="https://zh.wikipedia.org/wiki/%E4%BA%92%E8%81%94%E7%BD%91">互联网</a>及其他方面上。</p></li></ul><h3 id="Chapter-2-图像分割技术">Chapter 2 图像分割技术</h3><h4 id="2-1-研究背景">2.1 研究背景</h4><p>人脸识别、指纹识别、车牌识别</p><p>图像分割是图像处理到图像分析的关键步骤。</p><p><strong>基于阈值的图像分割</strong></p><ul><li>直方图法、迭代法和OTSU算法</li></ul><p><strong>基于区域的图像分割算法</strong></p><ul><li>把具有某种相似性的像素连通，将图像分成很多一致性强的小区域，再按照一定规则将小区域融合成大区域，达到分割图像的目的</li></ul><p><strong>基于边缘检测的图像分割算法</strong></p><ul><li>检测图像的边缘信息实现对图像的分割</li></ul><p><strong>基于特定理论的图像分割算法</strong></p><h4 id="2-2-直方图法">2.2 直方图法</h4><ul><li>直方图（Histogram）是在图像中像素灰度级与对应灰度级像素的二维统计关系。<br><img src="https://pic.iqy.ink/2022/03/01/7b88502a522b5.png" alt="1646135068962.png"  /></li></ul><h5 id="2-2-1-单阈值分割法">2.2.1 单阈值分割法</h5><ul><li><p>又称<strong>全局阈值法</strong>，即在整幅图中使用一个阈值</p></li><li><p>整幅图像分成两个区域，即目标（黑/白色）和背景（白/黑色）<br>$$<br>g(x, y)=\left{\begin{array}{ll}<br>1 &amp; f(x, y) \geq \mathbb{T} \<br>0 &amp; f(x, y)&lt;\mathbb{T}<br>\end{array}\right.<br>$$</p></li><li><p>对于目标和背景对比较明显的图像，其灰度直方图为双峰形状，可选择两峰之前的<strong>波谷对应的像素值</strong>作为全局阈值。</p></li><li><p>对于物体和背景对不明显的图像，直方图为单峰形状，采用全局阈值法不太合适。</p></li></ul><h5 id="2-2-2-双阈值分割法">2.2.2 双阈值分割法</h5><p>$$<br>g(x, y)=\left{\begin{array}{ll}<br>1 &amp; \mathbb{T} 1 \leq f(x, y) \leq \mathbb{T} 2 \<br>0 &amp; \text { Else }<br>\end{array}\right.<br>$$<br>处理方法：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:m</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">j</span> = <span class="number">1</span>:n</span><br><span class="line"><span class="keyword">if</span> I_gray(<span class="built_in">i</span>,<span class="built_in">j</span>) &gt; <span class="number">50</span> &amp;&amp; I_gray(<span class="built_in">i</span>,<span class="built_in">j</span>) &lt; <span class="number">150</span></span><br><span class="line">I_BW(<span class="built_in">i</span>,<span class="built_in">j</span>) = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">I_BW(<span class="built_in">i</span>,<span class="built_in">j</span>) = o;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="built_in">figure</span>;</span><br><span class="line">imshow(I_BE);</span><br></pre></td></tr></table></figure><h5 id="2-2-3-多个阈值分割法">2.2.3 多个阈值分割法</h5><p>$$<br>g(x, y)=\left{\begin{array}{ll}<br>g_{1} &amp; \mathbb{T}  1 \leq f(x, y) \leq \mathbb{T}  2 \<br>g_{2} &amp; \mathbb{T}  3 \leq f(x, y) \leq \mathbb{T}  4 \<br>&amp; \ldots \<br>g_{n} &amp; \text { Else }<br>\end{array}\right.<br>$$</p><p>样例：</p><p><img src="https://pic.iqy.ink/2022/03/01/70a327a206331.png" alt="1646145445337.png"></p><h5 id="2-2-4-半阈值分割法">2.2.4 半阈值分割法</h5><p>$$<br>\begin{array}{l}<br>g(x, y)=\left{\begin{array}{l}<br>1 \quad f(x, y) \geq \mathbb{T}  \<br>f(x, y) \quad f(x, y)&lt;\mathbb{T}<br>\end{array}\right. \</p><p>g(x, y)=\left{\begin{array}{ll}<br>f(x, y) &amp; f(x, y)&lt;255  \<br>255 &amp; f(x, y) \geq 225<br>\end{array}\right.<br>\end{array}<br>$$</p><h4 id="2-3-迭代法">2.3 迭代法</h4><p>迭代法是通过迭代的方法来求最佳阈值，具有一定的自适应性</p><ul><li>步骤一：</li></ul><p>$$<br>\mathbb{T} <em>{1}=\frac{\sum</em>{i=1}^{m} \sum_{j=1}^{n} \mathbb{I} (i, j)}{m \times n}<br>$$</p><p>设定阈值精度参数 T ，并选取一个初始阈值 T （通常可选取图像平均灰度值）</p><ul><li><p>步骤二：</p><p><img src="https://pic.iqy.ink/2022/03/01/a202b5397ac62.png" alt="1646146329116.png"></p></li></ul><p>用阈值 T_1分割图像。将图像分成两部分：G_1由灰度值大于T_1的像素组成，G_2由灰度值小于或等于T_1的像素组成。</p><ul><li>步骤三：</li></ul><p>计算G_1和G_2中所有像素的平均值u_1和u_2。</p><ul><li>步骤四：</li></ul><p>计算新的阈值 T_1 = (u_1 + u_2) / 2</p><ul><li>步骤五：</li></ul><p>如果 |T_2 - T_1| &lt; T_0 则推出T_2为最佳阈值；否则，将T_2赋值给T_1，并重复执行步骤直到获得最佳阈值。</p><h4 id="2-4-OSTU法">2.4 OSTU法</h4><p><strong>OTSU法</strong>是在1980年日本人OTSU提出的，又称为<strong>最大类间方差法</strong>。基本思想是将直方图处理分割成两组，当被分成两类的方差为最大时，决定阈值。<br>当对象和背景的灰度值的差异具有一定大小的时候，OTSU法是很有效的。</p><ul><li>设原始灰度图像灰度级为L，灰度级为i的像素点数为n_i，则图像的全部像素数为:</li></ul><p>$$<br>N = n_{0}+n_{1}+···+n_{L-1}<br>$$</p><ul><li>归一化直方图：</li></ul><p>$$<br>p_{i}=\frac{n_i}{\N}\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ <br>\sum_{i=0}^{L-1}p_{i}=1<br>$$</p>]]></content>
      
      
      <categories>
          
          <category> 理论 </category>
          
          <category> 理论/文化课 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图像处理 </tag>
            
            <tag> 学术研究 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++程序设计之变量命名指南</title>
      <link href="/2022/02/21/name/"/>
      <url>/2022/02/21/name/</url>
      
        <content type="html"><![CDATA[<h3 id="算法竞赛选手，在变量名使用上，有诸多门派：">算法竞赛选手，在<code>变量名</code>使用上，有诸多门派：</h3><ul><li><p>字母派：<code>a</code> <code>b</code> <code>c</code> <code>d</code> <code>e</code> <code>f</code> <code>g</code> 依次使用</p></li><li><p>新字母派：<code>array</code>，<code>brray</code>，<code>crray</code> 表示三个数组</p></li><li><p>新新字母派：<code>img</code>，<code>jmg</code>，<code>kmg</code> 表示三张图片</p></li><li><p>拼音派：用 <code>shanchu</code> 表示删除，用 <code>xiugai</code> 表示修改</p></li><li><p>卖萌派：<code>QAQ</code>，<code>qwq</code>，<code>TAT</code>，<code>orz</code></p></li><li><p>复读派：<code>n</code>，<code>nn</code>，<code>nnn</code></p></li><li><p>重排派：<code>next</code>，<code>extn</code>，<code>xtne</code></p></li><li><p>化合物派：<code>h2o</code>, <code>ch4</code>, <code>co2</code></p></li><li><p>下划线派：<code>_ </code>，<code>__</code>，<code>___</code></p></li><li><p>脏话派：<code>f**k</code>，<code>s**t</code>，<code>t*d</code></p></li><li><p>除了循环变量一般用 i，j，k 以外，其它变量名大家就放飞自我了</p></li></ul><p>这样降低了代码可读性，一段时间以后谁也看不懂了，也不利于相互交流</p><p>这里按字母序列出一些推荐使用的变量名，仅供参考，抛砖引玉</p><pre><code class="language-c++">add 加anc, ancestor 祖先ans, answer 答案bel, belong 属于best 最佳的build 建立block 障碍ch, char 字符check 判定color 颜色cmp, compare 比较cnt, count 计数器cur, current 当前量deg, degree 度数dep, depth 深度del, delete 删除delta 增量diff, difference 差别dist, distance 距离div, division 除法，部分dp 动态规划edge 边extra 额外的fa, father 父亲factor 因子flag 标志flow 流from 来自get 得到Hash 哈希表（hash是保留字）heap 堆in 入ind, index 标号inq 在队列里inf, infinity 无穷大init, initialize 初始化insert 插入inv, inverse 翻转，颠倒last 最后一个len, length 长度lim, limit 极限low, lower 下边的mat, matrix 矩阵mid, middle 中间量mod 模modify 修改mp, map 映射mst 最小生成树mul, multiply 乘法node 结点num, number 数量nxt 后继（next是保留字）out 出pa, pair 对子pre, precursor 前驱prime 质数pos, position 位置prod, product 乘积put 放置que, queue 队列query 询问rank 秩res, result 结果res, residual 剩余scc 强连通分量size 大小split 分裂start 开始stk, stack 栈str 字符串suc, succeed 后继sum 和tim 时间（time是保留字）tmp, temporary 临时量tree 树to 表目的unite 联合up, upper 上边的update 更新used 使用过的val, value 值vec, vector 向量vis, visit 访问zero 零</code></pre>]]></content>
      
      
      <categories>
          
          <category> 理论 </category>
          
          <category> 理论/面向对象 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面向对象 </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Continue blogging，2022！</title>
      <link href="/2022/01/31/continue%20blogging,2020!/"/>
      <url>/2022/01/31/continue%20blogging,2020!/</url>
      
        <content type="html"><![CDATA[<p>写于2022/1/31，刚好除夕夜</p><p>因为闲了太多天于是觉得要做点什么，看到服务器打折，想起来博客还托管在 GitHub Pages 上，那就好好整整自己的博客吧。</p><h1><a href="http://Retamev.github.io">Retamev.github.io</a> 的开发日记</h1><span id="more"></span><h2 id="主题的选择">主题的选择</h2><p><a href="https://camo.githubusercontent.com/d509893a31f8133dddd9a7fb3db3f00c36d8a1a5f6ac74d4072366902ce2bad5/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f7061636b6167652d6a736f6e2f762f6a65727279633132372f6865786f2d7468656d652d627574746572666c792f6d61737465723f636f6c6f723d253233316162316164266c6162656c3d6d6173746572"><img src="https://camo.githubusercontent.com/d509893a31f8133dddd9a7fb3db3f00c36d8a1a5f6ac74d4072366902ce2bad5/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f7061636b6167652d6a736f6e2f762f6a65727279633132372f6865786f2d7468656d652d627574746572666c792f6d61737465723f636f6c6f723d253233316162316164266c6162656c3d6d6173746572" alt="master version"></a><a href="https://camo.githubusercontent.com/6560a125081e9201316b73278edc8da47826332ec094f2167f331db6a5bf2c5c/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f7061636b6167652d6a736f6e2f762f6a65727279633132372f6865786f2d7468656d652d627574746572666c792f6465763f6c6162656c3d646576"><img src="https://camo.githubusercontent.com/6560a125081e9201316b73278edc8da47826332ec094f2167f331db6a5bf2c5c/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f7061636b6167652d6a736f6e2f762f6a65727279633132372f6865786f2d7468656d652d627574746572666c792f6465763f6c6162656c3d646576" alt="master version"></a><a href="https://camo.githubusercontent.com/53cd517a715f5c131d2d78adffcb196d9ddb11f1ae688e3cc6a480566e2ab9e3/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f762f6865786f2d7468656d652d627574746572666c793f636f6c6f723d253039253233626630306666"><img src="https://camo.githubusercontent.com/53cd517a715f5c131d2d78adffcb196d9ddb11f1ae688e3cc6a480566e2ab9e3/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f762f6865786f2d7468656d652d627574746572666c793f636f6c6f723d253039253233626630306666" alt="https://img.shields.io/npm/v/hexo-theme-butterfly?color=%09%23bf00ff"></a><a href="https://camo.githubusercontent.com/2fa78a96d51d68835c0ec70b837093a0fac27dda205e23cfebf5a2906d3635e3/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6865786f2d352e302b2d3065383363"><img src="https://camo.githubusercontent.com/2fa78a96d51d68835c0ec70b837093a0fac27dda205e23cfebf5a2906d3635e3/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6865786f2d352e302b2d3065383363" alt="hexo version"></a><a href="https://camo.githubusercontent.com/773b553badb8b787a302f8ec34b7ca37f67e19efa63806678c5c8795c47303e4/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f6a65727279633132372f6865786f2d7468656d652d627574746572666c793f636f6c6f723d464635353331"><img src="https://camo.githubusercontent.com/773b553badb8b787a302f8ec34b7ca37f67e19efa63806678c5c8795c47303e4/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f6a65727279633132372f6865786f2d7468656d652d627574746572666c793f636f6c6f723d464635353331" alt="license"></a></p><p>2021 年暑假在 <code>Github</code> 闲逛，对 <code>butterfly</code> 主题一见钟情，加上时用的动态博客维护较为麻烦，便萌生了把博客搬迁到 <code>Hexo</code> 的想法。</p><p>于是最后选择了 <a href="https://hexo.io/zh-cn/">Hexo</a> + <a href="https://github.com/jerryc127/hexo-theme-butterfly">Butterfly</a> 的方案。</p><blockquote><p><strong>什么是 <code>Hexo</code> ？</strong></p><p><code>Hexo</code> 是一个快速的、简单的、功能强大的博客框架。你可以通过 <code>Markdown</code> 语言写文章，然后 <code>Hexo</code> 帮你生成一个带有漂亮主题的静态页面。</p><p><strong>什么是 <code>Butterfly</code> ？</strong></p><p><code>Butterfly</code> 是一个 <code>Hexo</code> 框架下的简单卡片式 UI 设计主题。搭配<code>Node.js</code>和<code>Git</code>(分布式版本控制系统)将主题挂载到你的博客仓库。</p></blockquote><h2 id="Hexo-的安装和后续操作">Hexo 的安装和后续操作</h2><h3 id="安装">安装</h3><p>借助搜索引擎的帮助安装完 <code>Node</code> 以及 <code>Git</code> 后，新建一个标签为<code>blog</code>的文件夹，在留白处单击鼠标右键选择 <code>Git Bash Here</code> 对根目录执行 <code>Git</code> 操作。</p><p>输入下面的指令安装 <code>Hexo</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>安装完成后可以通过以下指令验证安装，出现版本号即为成功。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo -v</span><br></pre></td></tr></table></figure><h3 id="启动">启动</h3><p>输入以下指令生成基础文件和目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><p>输入以下指令安装运行<code>hexo</code>的一些必要的组件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><p>运行完，当前目录下会自动创建一些目录，如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds/</span><br><span class="line">├── scripts/</span><br><span class="line">├── <span class="built_in">source</span>/</span><br><span class="line">└── themes/</span><br></pre></td></tr></table></figure><ul><li><code>_config.yml</code> 站点配置文件</li><li><code>package.json</code> 应用数据。从它可以看出Hexo版本信息，以及它所默认或者说依赖的一些组件。</li><li><code>scaffolds</code> 模版文件。当你创建一篇新的文章时，Hexo会依据模版文件进行创建，主要用在你想在每篇文章都添加一些共性的内容的情况下。</li><li><code>scripts</code> 用于存放 <code>JavaScript</code> 文件</li><li><code>source</code> 这个文件夹就是放文章的地方了，除了文章还有一些主要的资源，比如文章里的图片，文件等等东西。这个文件夹最好定期做一个备份，丢了它，整个站点就废了。</li><li><code>themes</code> 主题文件夹。</li></ul><h3 id="配置">配置</h3><p>若要修改网站标题、副标题和邮箱等个人资料，就去修改站点配置文件 <code>_config.yml</code> ，主题支持 <code>EnG</code> <code>zh-CN(简体中文)</code> <code>zh-TW(繁体中文)</code> 三种语言</p><p><img src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/20191120000444.png" alt="Profile"></p><ol><li>Site 部分，也就是站点的一些参数设置：</li></ol><ul><li><code>title</code> 网站的名字，也就是 HTML 的 title ，会显示在浏览器标签上，如果是博客一般就是写 <code>Reta的博客</code> 这样子啦。</li><li><code>subtitle</code> 站点副标题，会显示在 title 后，可以写一句代表自己的句子（？。</li><li><code>description</code> 站点描述，可以不填…不是什么都要填的！</li><li><code>author</code> 作者，填上自己的标记叭。</li><li><code>language</code> 语言，改成 <code>zh-CN</code> 。</li><li><code>timezone</code> 站点时区，默认是电脑时间，不用管。</li></ul><ol start="2"><li>URL 部分，在这里要链接到自己的 GitHub 仓库</li></ol><ul><li><code>url</code> 站点网址，如果氪金买了域名就填自己的域名，如果和我一样是靠 GitHub 施舍，那就填上网站对应的仓库链接，如 <code>https://retamev.github.io/</code> 。</li></ul><ol start="3"><li>Writing 部分，在这里有一些关于你发布 <code>Post</code> 的设置。</li></ol><ul><li><code>new_post_name</code> 新建文章默认文件名，默认值为 <code>title.md</code> ，比如你执行命令&quot;hexo new hello&quot;，就会默认在 <code>_post</code> 目录下创建一个 <code>hello.md</code> 的文件</li><li><code>future</code> 一个开关，它会决定你的博客中会不会出现来自未来的文字…嘿嘿。</li></ul><ol start="4"><li>Home page setting 部分</li></ol><ul><li><code>per_page</code> 一页显示多少篇文章，0 为不分页，默认值为 10 。</li></ul><ol start="5"><li>Extensions 部分，在这里可以更换<strong>主题</strong>。</li></ol><ul><li><p><code>theme</code> 在这里填上主题的名字，但是在 <code>./node_modules</code> 目录下一定要有主题文件。</p></li><li><p><code>deploy</code> 部署设置，在 <code>type</code> 处填 <code>Git</code> ，在 <code>repo或者repository</code> 处填写 GitHub 生成的链接，在 <code>branch</code> 处填 <code>main</code> 。</p><p><img src="https://s4.ax1x.com/2022/02/01/HFhcSf.png" alt="url"></p></li></ul><h3 id="Hexo-常用指令">Hexo 常用指令</h3><h4 id="简写指令">简写指令</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">$ hexo n <span class="string">&quot;我的第一篇文章&quot;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">#等价于 $ hexo new &quot;我的第一篇文章&quot; ，也等价于 $ hexo new post &quot;我的第一篇文章&quot;</span></span><br><span class="line"></span><br><span class="line">$ hexo p </span><br><span class="line"></span><br><span class="line"><span class="comment">#等价于 $ hexo publish</span></span><br><span class="line"></span><br><span class="line">$ hexo g </span><br><span class="line"></span><br><span class="line"><span class="comment">#等价于 $ hexo generate</span></span><br><span class="line"></span><br><span class="line">$ hexo s </span><br><span class="line"></span><br><span class="line"><span class="comment">#等价于 $ hexo server</span></span><br><span class="line"></span><br><span class="line">$ hexo d </span><br><span class="line"></span><br><span class="line"><span class="comment">#等价于 $ hexo deploy</span></span><br><span class="line"></span><br><span class="line">$ hexo deploy -g </span><br><span class="line"></span><br><span class="line"><span class="comment">#等价于 $ hexo deploy --generate</span></span><br><span class="line"></span><br><span class="line">$ hexo generate -d </span><br><span class="line"></span><br><span class="line"><span class="comment">#等价于 $ hexo generate --deploy</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#注: 以下指令无简写</span></span><br><span class="line"></span><br><span class="line">$ hexo clean</span><br><span class="line"></span><br><span class="line">$ git --version</span><br></pre></td></tr></table></figure><h4 id="指令说明">指令说明</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server </span><br><span class="line"></span><br><span class="line"><span class="comment"># Hexo 会监视文件变动并自动更新，除修改站点配置文件外,无须重启服务器,直接刷新网页即可生效。</span></span><br><span class="line"></span><br><span class="line">$ hexo server -s </span><br><span class="line"></span><br><span class="line"><span class="comment">#以静态模式启动</span></span><br><span class="line"></span><br><span class="line">$ hexo server -p 5000 </span><br><span class="line"></span><br><span class="line"><span class="comment">#更改访问端口 ( 默认端口为 4000，如 localhost:4000 )</span></span><br><span class="line"></span><br><span class="line">$ hexo server -i IP</span><br><span class="line"></span><br><span class="line"><span class="comment">#自定义 IP</span></span><br><span class="line"></span><br><span class="line">$ hexo clean </span><br><span class="line"></span><br><span class="line"><span class="comment">#清除缓存 ,网页正常情况下可以忽略此条命令,执行该指令后,会删掉站点根目录下的public文件夹</span></span><br><span class="line"></span><br><span class="line">$ hexo g </span><br><span class="line"></span><br><span class="line"><span class="comment">#生成静态网页 (执行 $ hexo g后会在站点根目录下生成public文件夹, hexo会将./blog/source/下面的.md后缀的文件编译为.html后缀的文件,存放在./blog/public/路径下)</span></span><br><span class="line"></span><br><span class="line">$ hexo d </span><br><span class="line"></span><br><span class="line"><span class="comment">#将本地数据部署到远端服务器( 如 GitHub )</span></span><br><span class="line"></span><br><span class="line">$ hexo init 文件夹名称 </span><br><span class="line"></span><br><span class="line"><span class="comment">#初始化文件夹名称</span></span><br><span class="line"></span><br><span class="line">$ npm update hexo -g</span><br><span class="line"></span><br><span class="line"><span class="comment">#升级</span></span><br><span class="line"></span><br><span class="line">$ npm install hexo -g</span><br><span class="line"></span><br><span class="line"><span class="comment">#安装</span></span><br><span class="line"></span><br><span class="line">$ node -v </span><br><span class="line"></span><br><span class="line"><span class="comment">#查看node.js版本号</span></span><br><span class="line"></span><br><span class="line">$ npm -v </span><br><span class="line"></span><br><span class="line"><span class="comment">#查看npm版本号</span></span><br><span class="line"></span><br><span class="line">$ git --version </span><br><span class="line"></span><br><span class="line"><span class="comment">#查看git版本号</span></span><br><span class="line"></span><br><span class="line">$ hexo -v </span><br><span class="line"></span><br><span class="line"><span class="comment">#查看hexo版本号</span></span><br><span class="line"></span><br><span class="line">$ hexo publish [layout] &lt;title&gt; </span><br><span class="line"></span><br><span class="line"><span class="comment">#通过 publish 命令将草稿移动到 ./source/_posts 文件夹,如:$ hexo publish [layout] &lt;title&gt;,草稿默认是不会显示在页面中的，可在执行时加上 --draft 参数，或是把 render_drafts 参数设为 true 来预览草稿。</span></span><br></pre></td></tr></table></figure><p>作者暂时睡觉了zzz</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 技术/网站 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>如何写好更新记录？</title>
      <link href="/2021/10/20/hello-world/"/>
      <url>/2021/10/20/hello-world/</url>
      
        <content type="html"><![CDATA[<h3 id="Reta姐姐的小破站ver-2-0">Reta姐姐的小破站ver 2.0</h3><p><a href="https://github.com/gohugoio/hugo"><img src="https://blog.coelacanthus.moe/images/hugo_badge.webp" alt="Generator is Hugo"> </a><a href="https://github.com/reuixiy/hugo-theme-meme"><img src="https://blog.coelacanthus.moe/images/meme_badge.webp" alt="Theme is MemE"> </a><a href="https://github.com/CoelacanthusHex/blog"><img src="https://blog.coelacanthus.moe/images/github_badge.webp" alt="Source on GitHub"> </a><a href="https://www.netlify.com/"><img src="https://blog.coelacanthus.moe/images/netlify_badge.webp" alt="Built on Netlify"></a></p><p>之前用 WordPress 搭的小站早就过期了，现在也不好找免费的虚拟主机薅羊毛，遂借用 <code>github.io  + Hexo</code> 搭建个“静态博客&quot;，来记录今后的点滴。</p><p>等有空了就写博文，咕咕咕</p><p><escape><span id="more"></span></escape></p><h2 id="初步规划">初步规划</h2><ul><li><p>魔改页面模板的源码</p><ul><li><p>修改文章的摘要摘取机制</p></li><li><p>增加背景图片</p></li></ul></li><li><p>翻一翻站点的配置文件</p></li><li><p>SEO 优化搜索引擎收录</p></li><li><p>侧边栏及导航栏管理</p><ul><li><p>友链</p></li><li><p>社交链接</p></li><li><p>分类</p></li><li><p>关于</p></li></ul></li><li><p>更改文章的标签和分类机制，对所有文章做一遍清洗，适当拆分/合并</p><ul><li><p>分类应有一级分类&quot;/技术&quot; “/日常&quot;和其下的二级分类”/技术/Linux&quot; “/技术/Python应用”</p></li><li><p>标签应侧重于体现文章的关键词</p></li></ul></li><li><p>写一些新博客</p><ul><li><p>将一些总结的内容放到博客上</p></li><li><p>写一些新内容</p></li><li><p>重写了 Friends 页面</p></li><li><p>写一些 About 页面</p></li></ul></li></ul><h2 id="更新实况">更新实况</h2><h3 id="2022-1-31">2022/1/31</h3><ul><li><p>重写了文章，对标签和分类做初步优化</p></li><li><p>数学公式渲染: 使用 marked 或 kramed，都会导致数学公式中的<code>_</code>被识别为斜体。</p><ul><li>解决方案: 卸载掉之前的 hexo 的 markdown 渲染器 marked，然后安装 <a href="https://github.com/hexojs/hexo-renderer-markdown-it">hexo-renderer-markdown-it</a>。如需配置其它参数，请参考 <a href="https://katex.org/docs/options.html">katex 官網</a></li></ul></li><li><p>大致做了下 SEO4</p></li><li><p>萌ICP备20220770号</p></li><li><p>注意到本站 Subtitle 可以设置成有意思的打字效果，于是添加了一些弹幕，供你消磨这几秒钟的加载时间（如果你没看清的话，<a href="retamev.github.io">点我</a>)，自认为这样能解决了本站静态资源较多带来的用户体验问题。</p><ul><li>内容: 瞎侃 + 喜欢的歌词 + 个人碎碎念</li><li>题外话：如果在 Devtools 把所有的 tips 连起来看，感觉还蛮怪的（</li></ul></li><li><p>另外，诸位虎年大吉，忙着写 bug 都忘了看春晚了(?)，还顺便通了个宵，睡觉？下次一定</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 日志 </category>
          
          <category> 日志/更新记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 站点日志 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
